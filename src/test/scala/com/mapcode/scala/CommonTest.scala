package com.mapcode.scala

import org.scalatest.prop.GeneratorDrivenPropertyChecks
import org.scalatest.{FunSuite, Matchers}

import scala.util.{Success, Failure, Try}

class CommonTest extends FunSuite with Matchers with GeneratorDrivenPropertyChecks {
  test("xDivider implementation matches") {
    Common.xDivider(1, 2147483647) should equal(360)
    Common.xDivider(-2147483648, -1) should equal(360)
    Common.xDivider(0, -1) should equal(360)
    Common.xDivider(-738253558, 0) should equal(360)
    Common.xDivider(0, -1) should equal(360)
    Common.xDivider(-2147483648, 1) should equal(360)
    Common.xDivider(-1981120568, 1395750030) should equal(360)
    Common.xDivider(0, -1) should equal(360)
    Common.xDivider(-1, 0) should equal(360)
    Common.xDivider(-12688310, 0) should equal(360)
    Common.xDivider(1, -1) should equal(360)
    Common.xDivider(-923789050, 1843051460) should equal(360)
    Common.xDivider(-979973608, 1) should equal(360)
    Common.xDivider(35295358, 1) should equal(440)
    Common.xDivider(-764898486, 339088950) should equal(360)
    Common.xDivider(-1, 2147483647) should equal(360)
    Common.xDivider(-2147483648, 280681133) should equal(360)
    Common.xDivider(-1337224547, 2147483647) should equal(360)
    Common.xDivider(11747764, 2091616211) should equal(367)
    Common.xDivider(0, 1110280926) should equal(360)
    Common.xDivider(0, -1) should equal(360)
    Common.xDivider(-2147483648, 1) should equal(360)
    Common.xDivider(-347932293, 189206263) should equal(360)
    Common.xDivider(-105347201, 1) should equal(360)
    Common.xDivider(1, 2147483647) should equal(360)
    Common.xDivider(-1, 1298860505) should equal(360)
    Common.xDivider(-2147483648, 0) should equal(360)
    Common.xDivider(-2147483648, 2147483647) should equal(360)
    Common.xDivider(-1, 953792823) should equal(360)
    Common.xDivider(0, -1) should equal(360)
    Common.xDivider(-1, 1) should equal(360)
    Common.xDivider(-2147483648, 0) should equal(360)
    Common.xDivider(-1, 719996021) should equal(360)
    Common.xDivider(-624299070, 1549506786) should equal(360)
    Common.xDivider(-2147483648, 1939772766) should equal(360)
    Common.xDivider(-1352286747, 0) should equal(360)
    Common.xDivider(-1, 0) should equal(360)
    Common.xDivider(-2147483648, 530811657) should equal(360)
    Common.xDivider(0, 0) should equal(360)
    Common.xDivider(-1418558120, 0) should equal(360)
    Common.xDivider(-329466085, 1114252615) should equal(360)
    Common.xDivider(1, 2147483647) should equal(360)
    Common.xDivider(-610187002, 938528128) should equal(360)
    Common.xDivider(-2147483648, 2147483647) should equal(360)
    Common.xDivider(-1, 1091925580) should equal(360)
    Common.xDivider(0, 1) should equal(360)
    Common.xDivider(1, 0) should equal(360)
    Common.xDivider(-789754122, 0) should equal(360)
    Common.xDivider(-1, -34318670) should equal(435)
    Common.xDivider(-1, 1073679700) should equal(360)
    Common.xDivider(-203546789, 928200345) should equal(360)
    Common.xDivider(-1, 705484536) should equal(360)
    Common.xDivider(-1, 1) should equal(360)
    Common.xDivider(-1, 1) should equal(360)
    Common.xDivider(-1, 2147483647) should equal(360)
    Common.xDivider(1, 1961688364) should equal(360)
    Common.xDivider(0, 1) should equal(360)
    Common.xDivider(-1, 0) should equal(360)
    Common.xDivider(-2147483648, 1894394614) should equal(360)
    Common.xDivider(-2147483648, 1) should equal(360)
    Common.xDivider(-2147483648, 2147483647) should equal(360)
    Common.xDivider(-1, 908865021) should equal(360)
    Common.xDivider(-636322092, -1) should equal(360)
    Common.xDivider(-1, 0) should equal(360)
    Common.xDivider(0, 2147483647) should equal(360)
    Common.xDivider(-1486281741, -1) should equal(360)
    Common.xDivider(1, 2147483647) should equal(360)
    Common.xDivider(-1, 1839038045) should equal(360)
    Common.xDivider(1, 2144392601) should equal(360)
    Common.xDivider(1, 912820638) should equal(360)
    Common.xDivider(-1, -12088689) should equal(368)
    Common.xDivider(-2147483648, 92208593) should equal(360)
    Common.xDivider(1, -1) should equal(360)
    Common.xDivider(-1494306368, 2147483647) should equal(360)
    Common.xDivider(1, 0) should equal(360)
    Common.xDivider(-1, 1) should equal(360)
    Common.xDivider(-938197723, 1039531612) should equal(360)
    Common.xDivider(-317147171, 1) should equal(360)
    Common.xDivider(16175458, 1) should equal(374)
    Common.xDivider(1, -1) should equal(360)
    Common.xDivider(-1490941538, -70826382) should equal(1094)
    Common.xDivider(1, 0) should equal(360)
    Common.xDivider(-7358662, 315473186) should equal(360)
    Common.xDivider(-2147483648, 2147483647) should equal(360)
    Common.xDivider(-867674273, -1) should equal(360)
    Common.xDivider(-2147483648, 1) should equal(360)
    Common.xDivider(0, 2147483647) should equal(360)
    Common.xDivider(0, 1) should equal(360)
    Common.xDivider(-733520913, 1650335406) should equal(360)
    Common.xDivider(1, 676455115) should equal(360)
    Common.xDivider(-1, 2084295462) should equal(360)
    Common.xDivider(0, 1) should equal(360)
    Common.xDivider(-381979709, 1) should equal(360)
    Common.xDivider(0, 1) should equal(360)
    Common.xDivider(-839396328, 2147483647) should equal(360)
    Common.xDivider(-1886631735, 0) should equal(360)
    Common.xDivider(1, 1) should equal(360)
    Common.xDivider(-657428734, 1) should equal(360)
    Common.xDivider(0, 0) should equal(360)
    Common.xDivider(-1, 1) should equal(360)
  }

  // implicit override val generatorDrivenConfig = PropertyCheckConfig(minSuccessful = 1000000000)
  test("countCityCoordinatesForCountry") {
    forAll {
      (sameCodex: Int, index: Int, firstCode: Int) =>
        val thisImpl = Try(Common.countCityCoordinatesForCountry(sameCodex, index, firstCode))
        val thatImpl = Try(Common.countCityCoordinatesForCountry2(sameCodex, index, firstCode))
        if (thisImpl.isSuccess) println(s"Common.countCityCoordinatesForCountry($sameCodex, $index, $firstCode) should equal($thatImpl)")
        (thisImpl, thatImpl) match {
          case (Failure(thisEx), Failure(thatEx)) => // thisEx.getMessage should equal(thatEx.getMessage)
          case (Success(thisVal), Success(thatVal)) => thisVal should equal(thatVal)
          case _ => thisImpl should equal(thatImpl)
        }
    }
  }
}
